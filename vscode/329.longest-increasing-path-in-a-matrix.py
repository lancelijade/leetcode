#
# @lc app=leetcode id=329 lang=python3
#
# [329] Longest Increasing Path in a Matrix
#

# @lc code=start
from functools import cache

class Solution:
    def longestIncreasingPath(self, matrix: list[list[int]]) -> int:

        m, n = len(matrix), len(matrix[0])

        @cache
        def dfs1(x: int, y:int) -> int:
            #print("dfs1:", x, y)
            maxle = 0
            for nx, ny in ((x, y+1), (x+1, y), (x, y-1), (x-1, y)):
                if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]:
                    le = dfs1(nx, ny)
                    maxle = max(maxle, le)
            return maxle+1

        maxlen = 0
        for i in range(m):
            for j in range(n):
                length = dfs1(i, j)
                maxlen = max(maxlen, length)
        return maxlen

        
# @lc code=end

matrix = [[9,9,4],[6,6,8],[2,1,1]]
matrix = [
    [3,4,5],
    [3,2,6],
    [2,2,1]]


matrix = [[19,2,8,6,4,14,1,0,17],[0,1,9,10,11,4,12,14,5],[14,12,16,0,15,8,5,2,8],[5,4,1,17,9,18,8,5,2],[9,5,4,8,16,7,11,5,0],[5,7,14,18,10,0,14,14,0],[9,14,4,13,18,16,9,12,10],[18,13,9,18,11,4,12,10,10],[7,14,16,19,10,19,11,6,4],[16,2,3,7,15,9,7,1,1],[1,6,16,15,18,6,6,1,14],[9,5,2,9,8,3,2,3,10],[2,3,16,8,7,7,0,18,16],[11,0,16,8,13,13,11,3,8],[17,11,0,12,11,15,12,17,0]]

matrix = [
    [0,1,2,3,4,5,6,7,8,9],
    [19,18,17,16,15,14,13,12,11,10],
    [20,21,22,23,24,25,26,27,28,29],
    [39,38,37,36,35,34,33,32,31,30],
    [40,41,42,43,44,45,46,47,48,49],
    [59,58,57,56,55,54,53,52,51,50],
    [60,61,62,63,64,65,66,67,68,69],
    [79,78,77,76,75,74,73,72,71,70],
    [80,81,82,83,84,85,86,87,88,89],
    [99,98,97,96,95,94,93,92,91,90],
    [100,101,102,103,104,105,106,107,108,109],
    [119,118,117,116,115,114,113,112,111,110],
    [120,121,122,123,124,125,126,127,128,129],
    [139,138,137,136,135,134,133,132,131,130],
    [0,0,0,0,0,0,0,0,0,0]]

so = Solution()
r = so.longestIncreasingPath(matrix)
print(r)